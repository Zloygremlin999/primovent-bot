import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.utils import executor
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('API_TOKEN')
if not API_TOKEN:
    logger.error("API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–∞"),
    KeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥")
)
main_menu.add(
    KeyboardButton("üìù –ü—Ä–æ –Ω–∞—Å"),
    KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
)
main_menu.add(
    KeyboardButton("üõ† –ü–æ—Å–ª—É–≥–∏"),
    KeyboardButton("üí¨ –í—ñ–¥–≥—É–∫–∏")
)
main_menu.add(
    KeyboardButton("üì∞ –ù–æ–≤–∏–Ω–∏"),
    KeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞")
)
main_menu.add(
    KeyboardButton("üì¶ –ö–æ—à–∏–∫")
)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
catalog_menu = InlineKeyboardMarkup(row_width=2)
catalog_menu.add(
    InlineKeyboardButton("–ö–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä–∏ ‚ùÑÔ∏è", callback_data='category_air_conditioners'),
    InlineKeyboardButton("–í–µ–Ω—Ç–∏–ª—è—Ü—ñ—è üí®", callback_data='category_ventilation'),
    InlineKeyboardButton("–û–ø–∞–ª–µ–Ω–Ω—è üî•", callback_data='category_heating'),
    InlineKeyboardButton("–ó–≤–æ–ª–æ–∂—É–≤–∞—á—ñ üíß", callback_data='category_humidifiers'),
    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')
)

# –¢–æ–≤–∞—Ä—ã
products = {
    'category_air_conditioners': [
        {"name": "–ö–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä General ECO RANGE ASHG09KPCA/AOHG09KPCA", "price": "25 000 –≥—Ä–Ω", "callback_data": "add_general_eco"},
        {"name": "–ö–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä LG Standard Plus PC09SQ", "price": "15 000 –≥—Ä–Ω", "callback_data": "add_lg_pc09sq"},
        {"name": "–ö–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä Daikin FTXB20C/RXB20C", "price": "18 500 –≥—Ä–Ω", "callback_data": "add_daikin_ftxb20c"},
    ],
    'category_ventilation': [
        {"name": "–í–ï–ù–¢–° –í–£–¢ 300-1 –í–ì –ï–°", "price": "63 000 –≥—Ä–Ω", "callback_data": "add_vents_vut300"},
        {"name": "–í–ï–ù–¢–° –í–£–¢ 2000 –ì", "price": "87 500 –≥—Ä–Ω", "callback_data": "add_vents_vut2000"},
    ]
}

# –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_cart = {}

# –®–∞–≥–∏ –¥–ª—è FSM (Finite State Machine) –¥–ª—è —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
class CheckoutSteps(StatesGroup):
    waiting_for_contact_info = State()
    waiting_for_confirmation = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É
def add_to_cart(user_id, item):
    if user_id not in user_cart:
        user_cart[user_id] = []
    user_cart[user_id].append(item)

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–í—ñ—Ç–∞—î–º–æ –≤ –∫–æ–º–ø–∞–Ω—ñ—ó ¬´–ü—Ä—ñ–º–∞ –í–µ–Ω—Ç¬ª! –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", reply_markup=main_menu)

@dp.message_handler(Text(equals="üè† –ì–æ–ª–æ–≤–Ω–∞"))
async def show_home(message: types.Message):
    await message.answer("–í—ñ—Ç–∞—î–º–æ! –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", reply_markup=main_menu)

@dp.message_handler(Text(equals="üõí –ö–∞—Ç–∞–ª–æ–≥"))
async def show_catalog(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤:", reply_markup=catalog_menu)

@dp.message_handler(Text(equals="üì¶ –ö–æ—à–∏–∫"))
async def view_cart(message: types.Message):
    user_id = message.from_user.id
    cart_items = user_cart.get(user_id, [])
    if cart_items:
        cart_text = "\n".join([f"- {item['name']} ({item['price']})" for item in cart_items])
        await message.answer(f"üõí **–í–∞—à –∫–æ—à–∏–∫**:\n{cart_text}\n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª.", parse_mode='Markdown')
        await message.answer("üõç –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    else:
        await message.answer("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")

@dp.message_handler(Text(equals="üõç –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
async def checkout(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    cart_items = user_cart.get(user_id, [])
    if cart_items:
        cart_text = "\n".join([f"- {item['name']} ({item['price']})" for item in cart_items])
        await message.answer(f"–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n{cart_text}\n\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ (—Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ email) –¥–ª—è –∑–≤'—è–∑–∫—É:")
        await CheckoutSteps.waiting_for_contact_info.set()
    else:
        await message.answer("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")

@dp.message_handler(state=CheckoutSteps.waiting_for_contact_info, content_types=types.ContentTypes.TEXT)
async def get_contact_info(message: types.Message, state: FSMContext):
    contact_info = message.text
    await state.update_data(contact_info=contact_info)
    
    await message.answer("–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏¬ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.", reply_markup=InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data='confirm_order'),
        InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='cancel_order')
    ))
    await CheckoutSteps.waiting_for_confirmation.set()

@dp.callback_query_handler(Text(equals='confirm_order'), state=CheckoutSteps.waiting_for_confirmation)
async def confirm_order_handler(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    contact_info = user_data.get("contact_info")
    await bot.send_message(callback_query.from_user.id, f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –ö–æ–Ω—Ç–∞–∫—Ç: {contact_info}. –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
    user_cart[callback_query.from_user.id] = []  # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞—Ç–∞–ª–æ–≥–∞
@dp.callback_query_handler(lambda c: c.data.startswith('category_'))
async def show_products(callback_query: types.CallbackQuery):
    category = callback_query.data
    items = products.get(category, [])
    if items:
        product_menu = InlineKeyboardMarkup(row_width=1)
        for item in items:
            product_button = InlineKeyboardButton(f"{item['name']} ‚Äî {item['price']}", callback_data=item["callback_data"])
            product_menu.add(product_button)
        product_menu.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_catalog'))
        await bot.send_message(callback_query.from_user.id, "–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:", reply_markup=product_menu)
    else:
        await bot.send_message(callback_query.from_user.id, "–¢–æ–≤–∞—Ä–∏ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ.", reply_markup=catalog_menu)

@dp.callback_query_handler(lambda c: c.data.startswith('add_'))
async def add_to_cart_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    product_code = callback_query.data[4:]
    item = next(
        (item for items in products.values() for item in items if item["callback_data"] == f"add_{product_code}"),
        None
    )
    if item:
        add_to_cart(user_id, item)
        await callback_query.answer(f"¬´{item['name']}¬ª –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞.")
    else:
        await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)